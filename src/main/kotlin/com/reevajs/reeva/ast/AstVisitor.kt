package com.reevajs.reeva.ast

import com.reevajs.reeva.ast.expressions.*
import com.reevajs.reeva.ast.literals.*
import com.reevajs.reeva.ast.statements.*

interface AstVisitor {
    fun visit(node: ArgumentNode)
    fun visit(node: ArrayElementNode)
    fun visit(node: ArrayLiteralNode)
    fun visit(node: ArrowFunctionNode)
    fun visit(node: AssignmentExpressionNode)
    fun visit(node: AwaitExpressionNode)
    fun visit(node: BigIntLiteralNode)
    fun visit(node: BinaryExpressionNode)
    fun visit(node: BindingDeclaration)
    fun visit(node: BindingDeclarationOrPattern)
    fun visit(node: BindingElisionElement)
    fun visit(node: BindingParameter)
    fun visit(node: BindingPatternNode)
    fun visit(node: BindingRestElement)
    fun visit(node: BindingRestProperty)
    fun visit(node: BlockNode)
    fun visit(node: BooleanLiteralNode)
    fun visit(node: BreakStatementNode)
    fun visit(node: CallExpressionNode)
    fun visit(node: ClassDeclarationNode)
    fun visit(node: ClassExpressionNode)
    fun visit(node: ClassFieldNode)
    fun visit(node: ClassMethodNode)
    fun visit(node: ClassNode)
    fun visit(node: CommaExpressionNode)
    fun visit(node: ComputedBindingProperty)
    fun visit(node: ConditionalExpressionNode)
    fun visit(node: ContinueStatementNode)
    fun visit(node: DebuggerStatementNode)
    fun visit(node: DestructuringDeclaration)
    fun visit(node: DoWhileStatementNode)
    fun visit(node: Export)
    fun visit(node: ExportNode)
    fun visit(node: ExpressionStatementNode)
    fun visit(node: ForAwaitOfNode)
    fun visit(node: ForInNode)
    fun visit(node: ForOfNode)
    fun visit(node: ForStatementNode)
    fun visit(node: FunctionDeclarationNode)
    fun visit(node: FunctionExpressionNode)
    fun visit(node: IdentifierNode)
    fun visit(node: IdentifierReferenceNode)
    fun visit(node: IfStatementNode)
    fun visit(node: Import)
    fun visit(node: ImportCallExpressionNode)
    fun visit(node: ImportMetaExpressionNode)
    fun visit(node: ImportNode)
    fun visit(node: LexicalDeclarationNode)
    fun visit(node: MemberExpressionNode)
    fun visit(node: MethodDefinitionNode)
    fun visit(node: ModuleNode)
    fun visit(node: NamedDeclaration)
    fun visit(node: NewExpressionNode)
    fun visit(node: NewTargetNode)
    fun visit(node: NullLiteralNode)
    fun visit(node: NumericLiteralNode)
    fun visit(node: ObjectLiteralNode)
    fun visit(node: OptionalAccessChain)
    fun visit(node: OptionalCallChain)
    fun visit(node: OptionalChainNode)
    fun visit(node: OptionalComputedAccessChain)
    fun visit(node: ParameterList)
    fun visit(node: ParenthesizedExpressionNode)
    fun visit(node: PropertyName)
    fun visit(node: RegExpLiteralNode)
    fun visit(node: RestParameter)
    fun visit(node: ReturnStatementNode)
    fun visit(node: ScriptNode)
    fun visit(node: SimpleBindingElement)
    fun visit(node: SimpleBindingProperty)
    fun visit(node: SimpleParameter)
    fun visit(node: StringLiteralNode)
    fun visit(node: SuperCallExpressionNode)
    fun visit(node: SuperPropertyExpressionNode)
    fun visit(node: SwitchStatementNode)
    fun visit(node: TemplateLiteralNode)
    fun visit(node: ThisLiteralNode)
    fun visit(node: ThrowStatementNode)
    fun visit(node: TryStatementNode)
    fun visit(node: UnaryExpressionNode)
    fun visit(node: UpdateExpressionNode)
    fun visit(node: VariableDeclarationNode)
    fun visit(node: WhileStatementNode)
    fun visit(node: YieldExpressionNode)
    fun visit(node: KeyValueProperty)
    fun visit(node: ShorthandProperty)
    fun visit(node: MethodProperty)
    fun visit(node: SpreadProperty)
    fun visit(node: EmptyStatementNode)
    fun visit(node: WithStatementNode)
    fun visit(node: CatchNode)
    fun visit(node: CatchParameter)
    fun visit(node: SwitchClause)
}

abstract class DefaultAstVisitor : AstVisitor {
    protected open fun visitNode(node: AstNode) {
        node.children.forEach { it.accept(this) }
    }

    override fun visit(node: ArgumentNode) = visitNode(node)
    override fun visit(node: ArrayElementNode) = visitNode(node)
    override fun visit(node: ArrayLiteralNode) = visitNode(node)
    override fun visit(node: ArrowFunctionNode) = visitNode(node)
    override fun visit(node: AssignmentExpressionNode) = visitNode(node)
    override fun visit(node: AwaitExpressionNode) = visitNode(node)
    override fun visit(node: BigIntLiteralNode) = visitNode(node)
    override fun visit(node: BinaryExpressionNode) = visitNode(node)
    override fun visit(node: BindingDeclaration) = visitNode(node)
    override fun visit(node: BindingDeclarationOrPattern) = visitNode(node)
    override fun visit(node: BindingElisionElement) = visitNode(node)
    override fun visit(node: BindingParameter) = visitNode(node)
    override fun visit(node: BindingPatternNode) = visitNode(node)
    override fun visit(node: BindingRestElement) = visitNode(node)
    override fun visit(node: BindingRestProperty) = visitNode(node)
    override fun visit(node: BlockNode) = visitNode(node)
    override fun visit(node: BooleanLiteralNode) = visitNode(node)
    override fun visit(node: BreakStatementNode) = visitNode(node)
    override fun visit(node: CallExpressionNode) = visitNode(node)
    override fun visit(node: ClassDeclarationNode) = visitNode(node)
    override fun visit(node: ClassExpressionNode) = visitNode(node)
    override fun visit(node: ClassFieldNode) = visitNode(node)
    override fun visit(node: ClassMethodNode) = visitNode(node)
    override fun visit(node: ClassNode) = visitNode(node)
    override fun visit(node: CommaExpressionNode) = visitNode(node)
    override fun visit(node: ComputedBindingProperty) = visitNode(node)
    override fun visit(node: ConditionalExpressionNode) = visitNode(node)
    override fun visit(node: ContinueStatementNode) = visitNode(node)
    override fun visit(node: DebuggerStatementNode) = visitNode(node)
    override fun visit(node: DestructuringDeclaration) = visitNode(node)
    override fun visit(node: DoWhileStatementNode) = visitNode(node)
    override fun visit(node: Export) = visitNode(node)
    override fun visit(node: ExportNode) = visitNode(node)
    override fun visit(node: ExpressionStatementNode) = visitNode(node)
    override fun visit(node: ForAwaitOfNode) = visitNode(node)
    override fun visit(node: ForInNode) = visitNode(node)
    override fun visit(node: ForOfNode) = visitNode(node)
    override fun visit(node: ForStatementNode) = visitNode(node)
    override fun visit(node: FunctionDeclarationNode) = visitNode(node)
    override fun visit(node: FunctionExpressionNode) = visitNode(node)
    override fun visit(node: IdentifierNode) = visitNode(node)
    override fun visit(node: IdentifierReferenceNode) = visitNode(node)
    override fun visit(node: IfStatementNode) = visitNode(node)
    override fun visit(node: Import) = visitNode(node)
    override fun visit(node: ImportCallExpressionNode) = visitNode(node)
    override fun visit(node: ImportMetaExpressionNode) = visitNode(node)
    override fun visit(node: ImportNode) = visitNode(node)
    override fun visit(node: LexicalDeclarationNode) = visitNode(node)
    override fun visit(node: MemberExpressionNode) = visitNode(node)
    override fun visit(node: MethodDefinitionNode) = visitNode(node)
    override fun visit(node: ModuleNode) = visitNode(node)
    override fun visit(node: NamedDeclaration) = visitNode(node)
    override fun visit(node: NewExpressionNode) = visitNode(node)
    override fun visit(node: NewTargetNode) = visitNode(node)
    override fun visit(node: NullLiteralNode) = visitNode(node)
    override fun visit(node: NumericLiteralNode) = visitNode(node)
    override fun visit(node: ObjectLiteralNode) = visitNode(node)
    override fun visit(node: OptionalAccessChain) = visitNode(node)
    override fun visit(node: OptionalCallChain) = visitNode(node)
    override fun visit(node: OptionalChainNode) = visitNode(node)
    override fun visit(node: OptionalComputedAccessChain) = visitNode(node)
    override fun visit(node: ParameterList) = visitNode(node)
    override fun visit(node: ParenthesizedExpressionNode) = visitNode(node)
    override fun visit(node: PropertyName) = visitNode(node)
    override fun visit(node: RegExpLiteralNode) = visitNode(node)
    override fun visit(node: RestParameter) = visitNode(node)
    override fun visit(node: ReturnStatementNode) = visitNode(node)
    override fun visit(node: ScriptNode) = visitNode(node)
    override fun visit(node: SimpleBindingElement) = visitNode(node)
    override fun visit(node: SimpleBindingProperty) = visitNode(node)
    override fun visit(node: SimpleParameter) = visitNode(node)
    override fun visit(node: StringLiteralNode) = visitNode(node)
    override fun visit(node: SuperCallExpressionNode) = visitNode(node)
    override fun visit(node: SuperPropertyExpressionNode) = visitNode(node)
    override fun visit(node: SwitchStatementNode) = visitNode(node)
    override fun visit(node: TemplateLiteralNode) = visitNode(node)
    override fun visit(node: ThisLiteralNode) = visitNode(node)
    override fun visit(node: ThrowStatementNode) = visitNode(node)
    override fun visit(node: TryStatementNode) = visitNode(node)
    override fun visit(node: UnaryExpressionNode) = visitNode(node)
    override fun visit(node: UpdateExpressionNode) = visitNode(node)
    override fun visit(node: VariableDeclarationNode) = visitNode(node)
    override fun visit(node: WhileStatementNode) = visitNode(node)
    override fun visit(node: YieldExpressionNode) = visitNode(node)
    override fun visit(node: KeyValueProperty) = visitNode(node)
    override fun visit(node: ShorthandProperty) = visitNode(node)
    override fun visit(node: MethodProperty) = visitNode(node)
    override fun visit(node: SpreadProperty) = visitNode(node)
    override fun visit(node: EmptyStatementNode) = visitNode(node)
    override fun visit(node: WithStatementNode) = visitNode(node)
    override fun visit(node: CatchNode) = visitNode(node)
    override fun visit(node: CatchParameter) = visitNode(node)
    override fun visit(node: SwitchClause) = visitNode(node)
}

fun AstVisitor(block: (AstNode) -> Unit) = object : DefaultAstVisitor() {
    override fun visitNode(node: AstNode) {
        block(node)
        super.visitNode(node)
    }
}

abstract class ClosureSkippingAstVisitor : DefaultAstVisitor() {
    override fun visit(node: FunctionDeclarationNode) {
        node.identifier?.let(::visitNode)
        visitNode(node.parameters)
    }

    override fun visit(node: FunctionExpressionNode) {
        node.identifier?.let(::visitNode)
        visitNode(node.parameters)
    }

    override fun visit(node: ArrowFunctionNode) {
        visitNode(node.parameters)
    }

    override fun visit(node: MethodDefinitionNode) {
        visitNode(node.propName)
        visitNode(node.parameters)
    }
}
