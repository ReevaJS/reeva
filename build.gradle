plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.10'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.10'
    id 'maven-publish'
}

group = 'com.reevajs'
version = '1.0.0'
def RELEASE = false

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.github.ReevaJS:mfbt:78080dba4e'
    implementation 'org.ow2.asm:asm:8.0.1'
    implementation 'org.ow2.asm:asm-tree:8.0.1'
    implementation 'org.ow2.asm:asm-commons:8.0.1'
    implementation 'com.github.mattco98:Koffee:3b4b48e9ff'
    implementation 'org.jruby.joni:joni:2.1.41'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation 'com.charleskorn.kaml:kaml:0.25.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1'
    testImplementation "io.strikt:strikt-core:0.28.0"
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ["-Xinline-classes", "-Xopt-in=kotlin.RequiresOptIn"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def publishingUsername = null
def publishingPassword = null

if (project.hasProperty("IS_CI")) {
    publishingUsername = System.getenv("REPOSILITE_USER")
    publishingPassword = System.getenv("REPOSILITE_PASSWORD")
} else if (project.hasProperty("reposilite_user")) {
    publishingUsername = project.property("reposilite_user")
    publishingPassword = project.property("reposilite_password")
}

jar {
    from sourceSets.main.output
}

task jarWithSources(type: Jar) {
    classifier('sources')
    from sourceSets.main.allSource
}

if (publishingUsername != null && publishingPassword != null) {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name

                if (RELEASE) {
                    version = project.version
                } else {
                    version = getGitHash()
                }

                artifact jarWithSources

                from components.kotlin
            }
        }

        repositories {
            maven {
                name 'reposilite'
                url = 'https://repo.mattco.me/' + (RELEASE ? 'releases' : 'snapshots')

                credentials {
                    username = publishingUsername
                    password = publishingPassword
                }

                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}
